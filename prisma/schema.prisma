datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum Theme {
    DEFAULT
    BLACK
}

enum CategoryType {
    EXPENSES
    INCOMES
}

model User {
    id            String            @id @default(uuid()) @map("id_user")
    name          String?
    email         String            @unique
    emailVerified DateTime?         @map(name: "email_verified")
    image         String?
    categories    Category[]
    userSettings  UserSettings[]
    bankAccounts  BankAccount[]
    accounts      Account[]
    sessions      Session[]
    @@map("user")
}

model Category {
    id                String        @id @default(uuid()) @map("id_category")
    userId            String        @map("id_user")
    user              User          @relation(fields: [userId], references: [id])
    parentCategoryId  String?       @map("id_parent_category")
    parentCategory    Category?     @relation("subcategories", fields: [parentCategoryId], references: [id])
    subCategories     Category[]    @relation("subcategories")
    name              String
    type              CategoryType
    iconId            String        @map("id_icon")
    color             String
    transactions      Transaction[]
    @@map("category")
}

model BankAccount {
    id              String          @id @default(uuid()) @map("id_bank_account")
    name            String
    description     String?
    iconId          String          @map("id_icon")
    color           String
    user            User            @relation(fields: [userId], references: [id])
    userId          String             @map("id_user")
    transactions    Transaction[]
    @@map("bank_account")
}

model Currency {
    id              String             @id @default(uuid()) @map("id_currency")
    name            String
    transactions    Transaction[]
    userSettings    UserSettings[]
    @@map("currency")
}

model Transaction {
    id              String      @id @default(uuid()) @map("id_transaction")
    category        Category    @relation(fields: [categoryId], references: [id])
    categoryId      String      @map("id_category")
    bankAccount     BankAccount @relation(fields: [bankAccountId], references: [id])
    bankAccountId   String      @map("id_bank_account")
    currency        Currency    @relation(fields: [currencyId], references: [id])
    currencyId      String      @map("id_currency")
    comment         String?
    money           Decimal
    date            DateTime
    @@map("transaction")
}

model Language {
    id            String            @id @default(uuid()) @map("id_language")
    name          String
    userSettings  UserSettings[]
    @@map("language")
}

model UserSettings {
    user        User        @relation(fields: [userId], references: [id])
    userId      String      @id @map("id_user_settings")
    theme       Theme       @default(DEFAULT)
    language    Language    @relation(fields: [languageId], references: [id])
    languageId  String      @map("id_language")
    currency    Currency    @relation(fields: [currencyId], references: [id])
    currencyId  String      @map("id_currency")
    @@map("user_settings")
}

model Account {
  id                 String  @id @default(uuid())
  userId             String  @map("id_user")
  type               String
  provider           String
  providerAccountId  String  @map("id_provider_account")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("id_user")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}
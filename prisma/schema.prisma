datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum Theme {
    DEFAULT
    BLACK
}

enum CategoryType {
    EXPENSES
    INCOMES
}

model User {
    id            Int               @id @default(autoincrement()) @map("id_user")
    name          String
    email         String            @unique
    emailVerified DateTime?         @map(name: "email_verified")
    image         String?
    createdAt     DateTime          @default(now()) @map(name: "created_at")
    updatedAt     DateTime          @default(now()) @map(name: "updated_at")
    categories    Category[]
    userSettings  UserSettings[]
    bankAccounts  BankAccount[]
    @@map("user")
}

model Category {
    id                Int           @id @default(autoincrement()) @map("id_category")
    userId            Int           @map("id_user")
    user              User          @relation(fields: [userId], references: [id])
    parentCategoryId  Int?          @map("id_parent_category")
    parentCategory    Category?     @relation("subcategories", fields: [parentCategoryId], references: [id])
    subCategories     Category[]    @relation("subcategories")
    name              String
    type              CategoryType
    iconId            String        @map("id_icon")
    color             String
    transactions      Transaction[]
    @@map("category")
}

model BankAccount {
    id              Int             @id @default(autoincrement()) @map("id_bank_account")
    name            String
    description     String?
    iconId          String          @map("id_icon")
    color           String
    user            User            @relation(fields: [userId], references: [id])
    userId          Int             @map("id_user")
    transactions    Transaction[]
    @@map("bank_account")
}

model Currency {
    id              Int             @id @default(autoincrement()) @map("id_currency")
    name            String
    transactions    Transaction[]
    userSettings    UserSettings[]
    @@map("currency")
}

model Transaction {
    id              Int         @id @default(autoincrement()) @map("id_transaction")
    category        Category    @relation(fields: [categoryId], references: [id])
    categoryId      Int         @map("id_category")
    bankAccount     BankAccount @relation(fields: [bankAccountId], references: [id])
    bankAccountId   Int         @map("id_bank_account")
    currency        Currency    @relation(fields: [currencyId], references: [id])
    currencyId      Int         @map("id_currency")
    comment         String?
    money           Decimal
    date            DateTime
    @@map("transaction")
}

model Language {
    id            Int               @id @default(autoincrement()) @map("id_language")
    name          String
    userSettings  UserSettings[]
    @@map("language")
}

model UserSettings {
    user        User        @relation(fields: [userId], references: [id])
    userId      Int         @id @map("id_user_settings")
    theme       Theme       @default(DEFAULT)
    language    Language    @relation(fields: [languageId], references: [id])
    languageId  Int         @map("id_language")
    currency    Currency    @relation(fields: [currencyId], references: [id])
    currencyId  Int         @map("id_currency")
    @@map("user_settings")
}

model Account {
    id                 Int       @default(autoincrement()) @id
    compoundId         String    @unique @map(name: "compound_id")
    userId             Int       @map(name: "user_id")
    providerType       String    @map(name: "provider_type")
    providerId         String    @map(name: "provider_id")
    providerAccountId  String    @map(name: "provider_account_id")
    refreshToken       String?   @map(name: "refresh_token")
    accessToken        String?   @map(name: "access_token")
    accessTokenExpires DateTime? @map(name: "access_token_expires")
    createdAt          DateTime  @default(now()) @map(name: "created_at")
    updatedAt          DateTime  @default(now()) @map(name: "updated_at")
    @@index([providerAccountId], name: "providerAccountId")
    @@index([providerId], name: "providerId")
    @@index([userId], name: "userId")
    @@map(name: "account")
}

model Session {
    id           Int      @default(autoincrement()) @id
    userId       Int      @map(name: "user_id")
    expires      DateTime
    sessionToken String   @unique @map(name: "session_token")
    accessToken  String   @unique @map(name: "access_token")
    createdAt    DateTime @default(now()) @map(name: "created_at")
    updatedAt    DateTime @default(now()) @map(name: "updated_at")
    @@map(name: "session")
}

model VerificationRequest {
    id         Int      @default(autoincrement()) @id
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now()) @map(name: "created_at")
    updatedAt  DateTime @default(now()) @map(name: "updated_at")
    @@map(name: "verification_request")
}